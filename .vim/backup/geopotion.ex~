defmodule Angle do
    alias Angle
    defstruct value: nil, units: nil

    @one_radian 6.283185307179586
    
    def new(val, units) when is_number(val) and is_atom(units) and (units == :degrees or units == :radians) do
      %Angle{value: val, units: units}
      |> normalize
    end 

    def new() do
      new(0.0, :degrees)
    end
    
    def new(val) when is_number(val) do
      new(val, :degrees) 
    end

    def normalize(%Angle{} = angle) do
      cond do
        angle.units == :degrees and angle.value >= 0 and angle.value < 360 -> angle
        angle.units == :degrees and angle.value >= 360 -> Angle.new(angle.value - 360) |> normalize
        angle.units == :degrees and angle.value < 0 -> Angle.new(angle.value + 360) |> normalize
        angle.units == :radians and angle.value >= 0 and angle.value < @one_radian -> angle
        angle.units == :radians and angle.value >= @one_radian > Angle.new(angle.value - @one_radian, :radians) |> normalize
        angle.units == :radians and angle.value < 0  -> Angle.new(angle.value + @one_radian, :radians) |> normalize
        true -> Angle.new()
      end
    end
end 

defmodule GeoPotion do
  @moduledoc """
    A module for interacting with Geo Spatial data
  """
  
   
end
